version: "3"

includes:
  upgrade:
    taskfile: ./configs/upgrade
    optional: true
    flatten: true

vars:
  #* URL
  URL_GITHUB: https://github.com/bastean/x

  #* Go
  GO_WORK: github.com/bastean/x
  GO_MODULES:
    sh: find -name "go.mod" -type f -exec bash -c "dirname {} | xargs basename" ";"

  #* Prompt
  PROMPT_WARNING: This is a dangerous command... Do you want to continue?

tasks:
  #* Bin
  bashrc:
    internal: true
    requires:
      vars: ["CONFIG"]
    cmds:
      - echo -e "{{.CONFIG}}" >> ~/.bashrc
      - . ~/.bashrc

  dir-config: &dir-config
    dir: "{{if .DIR}}{{.DIR}}{{else}}{{.USER_WORKING_DIR}}{{end}}"

  bash:
    <<: *dir-config
    internal: true
    requires:
      vars: ["CMD"]
    cmd: bash -o pipefail -c '{{.CMD}}'

  curl:
    internal: true
    requires:
      vars: ["URL", "PIPE"]
    cmd: curl -sSfL {{.URL}} | {{.PIPE}}

  prompt-*:
    internal: true
    silent: true
    requires:
      vars: ["PROMPT"]
    vars:
      PROMPT: "{{index .MATCH 0}}"
    cmd: echo {{.PROMPT}}

  replace:
    internal: true
    requires:
      vars: ["OLD", "NEW", "FILE"]
    cmd: sed -i -E 's/{{.OLD}}/{{.NEW}}/g' {{.FILE}}

  go-modules-config: &go-modules-config
    internal: true
    requires:
      vars: ["MODULE"]
    dir: "{{.MODULE}}"

  go-modules:
    requires:
      vars: ["TASK"]
    vars:
      LIST: "{{.GO_MODULES}}"
    cmds:
      - for: { var: LIST, as: MODULE }
        task: "{{.TASK}}"
        vars:
          MODULE: "{{.MODULE}}"

  work-sync: go work sync

  bun-ci:
    internal: true
    cmd: bun i --frozen-lockfile

  ncu:
    internal: true
    cmd: bunx ncu -ws -u {{.FILTERS}}

  release-it:
    internal: true
    cmd: bunx release-it -V {{.OPTIONS}}

  release-it-dry:
    internal: true
    cmd: bunx release-it -V -d --no-git.requireCleanWorkingDir {{.OPTIONS}}

  trufflehog-git:
    requires:
      vars: ["URI"]
    cmd: sudo trufflehog git {{.URI}} --only-verified

  trivy-repo:
    requires:
      vars: ["SCANNERS"]
    cmd: trivy repo --skip-dirs vendor --skip-dirs node_modules --skip-dirs dist --exit-code 1 --scanners {{.SCANNERS}}

  git-reset-hard:
    internal: true
    cmd: git reset --hard HEAD

  #* Upgrade
  upgrade-managers:
    cmds:
      - sudo apt update
      #? - sudo apt upgrade -y
      - sudo apt install -y python3
      - task: curl
        vars:
          URL: https://bun.sh/install
          PIPE: sudo BUN_INSTALL=/usr/local bash

  upgrade-go:
    cmds:
      - task: go-modules
        vars:
          TASK: upgrade-go-modules
      - task: work-sync

  upgrade-go-modules:
    <<: *go-modules-config
    cmd: go get -t -u ./...

  upgrade-bun:
    cmds:
      - task: ncu
      - bun i

  upgrade-workflow:
    vars:
      MODULES: '{{splitLines .GO_MODULES | join ", "}}'
    cmds:
      - task: replace
        vars:
          OLD: options:\s\[.*\]
          NEW: 'options: \[{{.MODULES}}\]'
          FILE: ./.github/workflows/module.yml

  upgrade-reset:
    cmds:
      - task: git-reset-hard
      - task: bun-ci

  #* Install
  install-scanners:
    cmds:
      - go install github.com/google/osv-scanner/cmd/osv-scanner@latest
      - task: curl
        vars:
          URL: https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh
          PIPE: sudo sh -s -- -b /usr/local/bin
      - task: curl
        vars:
          URL: https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh
          PIPE: sudo sh -s -- -b /usr/local/bin

  install-linters:
    cmds:
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install honnef.co/go/tools/cmd/staticcheck@latest

  install-debuggers:
    cmds:
      - go install golang.org/x/tools/cmd/deadcode@latest

  install-tools-dev:
    cmds:
      - task: install-scanners
      - task: install-linters
      - task: install-debuggers
      - go install github.com/air-verse/air@latest

  install-tools-test:
    cmds:
      - task: curl
        vars:
          URL: https://raw.githubusercontent.com/axllent/mailpit/develop/install.sh
          PIPE: sudo bash

  install-tooling:
    cmds:
      - task: install-tools-dev
      - task: install-tools-test

  install-tooling-ci:
    cmds:
      - task: install-tools-dev

  #* Download
  download-dependencies:
    cmds:
      - go mod download
      - task: work-sync
      - task: bun-ci

  #* Restore
  restore:
    cmds:
      - bunx husky init
      - git restore .

  #* Init
  init:
    cmds:
      - task: upgrade-managers
      - task: install-tooling
      - task: download-dependencies
      - task: restore

  init-ci:
    cmds:
      - task: upgrade-managers
      - task: install-tooling-ci
      - task: download-dependencies
      - task: restore

  genesis:
    cmds:
      - git init
      - git add .
      - task: init

  #* Scan
  scan-secrets-local:
    cmds:
      - task: trufflehog-git
        vars:
          URI: file://.
      - task: trivy-repo
        vars:
          SCANNERS: secret .

  scan-secrets-remote:
    cmds:
      - task: trufflehog-git
        vars:
          URI: "{{.URL_GITHUB}}"
      - task: trivy-repo
        vars:
          SCANNERS: secret {{.URL_GITHUB}}

  scan-vulns-local:
    cmds:
      - osv-scanner --call-analysis=all -r .
      - task: trivy-repo
        vars:
          SCANNERS: vuln .

  scan-misconfigs-local:
    cmds:
      - task: trivy-repo
        vars:
          SCANNERS: misconfig .

  scan-secrets:
    cmds:
      - task: scan-secrets-local
      - task: scan-secrets-remote

  scan-vulns:
    cmds:
      - task: scan-vulns-local

  scan-misconfigs:
    cmds:
      - task: scan-misconfigs-local

  scans:
    cmds:
      - task: scan-secrets
      - task: scan-vulns
      - task: scan-misconfigs

  #* Lint/Format
  lint:
    cmds:
      - task: go-modules
        vars:
          TASK: lint-modules
      - bunx prettier --no-config --ignore-unknown --write .

  lint-modules:
    <<: *go-modules-config
    cmds:
      - go mod tidy
      - go mod verify
      - goimports -l -w -local {{.GO_WORK}}/{{.MODULE}} .
      - gofmt -l -s -w .

  lint-check:
    cmds:
      - task: go-modules
        vars:
          TASK: lint-check-modules
      - bunx prettier --check .

  lint-check-modules:
    <<: *go-modules-config
    cmd: staticcheck ./...

  #* Debug
  debug-dead:
    cmds:
      - task: go-modules
        vars:
          TASK: debug-dead-modules

  debug-dead-modules:
    <<: *go-modules-config
    cmd: deadcode -test ./...

  debugs:
    cmds:
      - task: debug-dead

  #* Test
  test-clean:
    <<: *dir-config
    cmds:
      - go clean -testcache
      - mkdir -p test/report

  test-unit:
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - task: test-clean
      - task: bash
        vars:
          CMD: go test -count=1 -v -cover ./... -run TestUnit.* |& tee test/report/unit.report.log

  test-units:
    cmds:
      - task: go-modules
        vars:
          TASK: test-unit-modules

  test-unit-modules:
    <<: *go-modules-config
    cmds:
      - task: test-clean
        vars:
          DIR: "{{.MODULE}}"
      - task: bash
        vars:
          DIR: "{{.MODULE}}"
          CMD: go test -count=1 -v -cover ./... -run TestUnit.* |& tee test/report/unit.report.log

  test-integration:
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - task: test-clean
      - task: bash
        vars:
          CMD: go test -count=1 -race -v -cover ./... -run TestIntegration.* |& tee test/report/integration.report.log

  test-integrations:
    cmds:
      - task: go-modules
        vars:
          TASK: test-integration-modules

  test-integration-modules:
    <<: *go-modules-config
    cmds:
      - task: test-clean
        vars:
          DIR: "{{.MODULE}}"
      - task: bash
        vars:
          DIR: "{{.MODULE}}"
          CMD: go test -count=1 -race -v -cover ./... -run TestIntegration.* |& tee test/report/integration.report.log

  test-acceptance:
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - task: test-clean
      - task: bash
        vars:
          CMD: go test -count=1 -race -v -cover ./... -run TestAcceptance.* |& tee test/report/acceptance.report.log

  test-acceptances:
    cmds:
      - task: go-modules
        vars:
          TASK: test-acceptance-modules

  test-acceptance-modules:
    <<: *go-modules-config
    cmds:
      - task: test-clean
        vars:
          DIR: "{{.MODULE}}"
      - task: bash
        vars:
          DIR: "{{.MODULE}}"
          CMD: go test -count=1 -race -v -cover ./... -run TestAcceptance.* |& tee test/report/acceptance.report.log

  tests:
    cmds:
      - task: go-modules
        vars:
          TASK: tests-modules

  tests-modules:
    <<: *go-modules-config
    cmds:
      - task: test-clean
        vars:
          DIR: "{{.MODULE}}"
      - task: bash
        vars:
          DIR: "{{.MODULE}}"
          CMD: go test -count=1 -race -v -cover ./... |& tee test/report/report.log

  #* Build
  build-*:
    dir: "{{.USER_WORKING_DIR}}"
    requires:
      vars: ["BINARY"]
    vars:
      BINARY: "{{index .MATCH 0}}"
    env:
      GOWORK: off
    cmds:
      - task: lint
      - rm -rf build/
      - go build -ldflags="-s -w" -o build/{{.BINARY}} ./cmd/{{.BINARY}}

  #* Release
  release:
    cmds:
      - task: release-it

  release-alpha:
    cmds:
      - task: release-it
        vars:
          OPTIONS: --preRelease=alpha

  release-beta:
    cmds:
      - task: release-it
        vars:
          OPTIONS: --preRelease=beta

  release-ci:
    requires:
      vars: ["OPTIONS"]
    cmds:
      - task: release-it
        vars:
          OPTIONS: --ci --no-git.requireCleanWorkingDir -i minor {{.OPTIONS}}

  release-module:
    requires:
      vars: ["OPTIONS"]
    cmds:
      - go run ./tools/cmd/release {{.OPTIONS}}

  release-dry:
    cmds:
      - task: release-it-dry

  release-dry-version:
    cmds:
      - task: release-it-dry
        vars:
          OPTIONS: --release-version

  release-dry-changelog:
    cmds:
      - task: release-it-dry
        vars:
          OPTIONS: --changelog

  #* Go
  work-use-*:
    requires:
      vars: ["MODULE"]
    vars:
      MODULE: "{{index .MATCH 0}}"
    cmds:
      - go work use {{.MODULE}} && task upgrade-workflow
      - task: work-sync

  work-drop-*:
    prompt: "{{.PROMPT_WARNING}}"
    requires:
      vars: ["MODULE"]
    vars:
      MODULE: "{{index .MATCH 0}}"
    cmds:
      - go work edit -dropuse {{.MODULE}}
      - rm -rf {{.MODULE}} && task upgrade-workflow
      - task: work-sync

  #* Git
  commit: bunx czg

  git-update-*:
    requires:
      vars: ["REPOSITORY"]
    vars:
      REPOSITORY: "{{index .MATCH 0}}"
    cmds:
      - 'git commit -m "chore: update codexgo to {{.REPOSITORY}}"'
      - task: upgrade
      - git push
      - git status

  git-v*:
    requires:
      vars: ["VERSION"]
    vars:
      VERSION: "{{index .MATCH 0}}"
    cmds:
      - git checkout main
      - git pull --rebase
      - git checkout -b v{{.VERSION}}
      - git push -u github v{{.VERSION}}
      - git status

  git-*-dev*:
    requires:
      vars: ["MODULE", "VERSION"]
    vars:
      MODULE: "{{index .MATCH 0}}"
      VERSION: "{{index .MATCH 1}}"
    cmds:
      - git checkout main
      - git pull --rebase
      - git checkout -b {{.MODULE}}/dev{{.VERSION}}
      - git push -u github {{.MODULE}}/dev{{.VERSION}}
      - git status

  git-ci/*/dev*:
    requires:
      vars: ["MODULE", "VERSION"]
    vars:
      MODULE: "{{index .MATCH 0}}"
      VERSION: "{{index .MATCH 1}}"
    cmds:
      - git checkout {{.MODULE}}/dev{{.VERSION}}
      - git pull --rebase
      - git checkout -b ci/{{.MODULE}}/dev{{.VERSION}}
      - git push -u github ci/{{.MODULE}}/dev{{.VERSION}}
      - git status

  git-main-ci/*/dev*:
    requires:
      vars: ["MODULE", "VERSION"]
    vars:
      MODULE: "{{index .MATCH 0}}"
      VERSION: "{{index .MATCH 1}}"
    cmds:
      - git checkout main
      - git pull --rebase
      - git merge ci/{{.MODULE}}/dev{{.VERSION}}
      - git push
      - git status

  git-pull-v*:
    requires:
      vars: ["VERSION"]
    vars:
      VERSION: "{{index .MATCH 0}}"
    cmds:
      - git checkout main
      - git pull --rebase
      - git checkout v{{.VERSION}}
      - git merge main
      - git push
      - git status

  git-cleanup-*/dev*:
    requires:
      vars: ["MODULE", "VERSION"]
    vars:
      MODULE: "{{index .MATCH 0}}"
      VERSION: "{{index .MATCH 1}}"
    cmds:
      - git branch -d {{.MODULE}}/dev{{.VERSION}} ci/{{.MODULE}}/dev{{.VERSION}}
      - git push -u github :{{.MODULE}}/dev{{.VERSION}} :ci/{{.MODULE}}/dev{{.VERSION}}
      - git branch -a
      - git status

  WARNING-git-forget:
    prompt: "{{.PROMPT_WARNING}}"
    cmds:
      - git rm -r --cached .
      - git add .

  WARNING-git-genesis:
    prompt: "{{.PROMPT_WARNING}}"
    cmds:
      - git clean -e .env* -fdx
      - task: git-reset-hard
      - task: init

  #* Mailpit
  mailpit: mailpit --smtp-auth-allow-insecure --smtp-auth-accept-any

  #* Fix
  fix-dev:
    cmds:
      - task: upgrade-go
      - task: install-tools-dev

  fix-test:
    cmds:
      - task: upgrade-go
      - task: install-tools-test
