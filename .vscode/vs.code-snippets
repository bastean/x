{
  /* -------------------------------------------------------------------------- */
  /*                                    Test                                    */
  /* -------------------------------------------------------------------------- */

  "Unit/Integration Test": {
    "prefix": ["go_unit", "go_integration"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}_test",
      "",
      "import (",
      "\t\"testing\"",
      "",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/suite\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}TestSuite struct {",
      "\tsuite.Default",
      "\t${3:$LINE_COMMENT SUT}",
      "}",
      "",
      "func (s *$2TestSuite) SetupSuite() {",
      "\t$4",
      "}",
      "",
      "func (s *$2TestSuite) SetupTest() {",
      "\t$6",
      "}",
      "",
      "func (s *$2TestSuite) Test$2() {",
      "\t$8",
      "}",
      "",
      "func (s *$2TestSuite) Test$2Err$9() {",
      "\t$10",
      "}",
      "",
      "func (s *$2TestSuite) TestWith$11() {",
      "\t$12",
      "}",
      "",
      "func (s *$2TestSuite) TearDownTest() {",
      "\t$7",
      "}",
      "",
      "func (s *$2TestSuite) TearDownSuite() {",
      "\t$5",
      "}",
      "",
      "func Test${13|Unit,Integration|}$2Suite(t *testing.T) {",
      "\tsuite.Run(t, new($2TestSuite))",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Acceptance Test": {
    "prefix": ["go_acceptance"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}_test",
      "",
      "import (",
      "\t\"testing\"",
      "",
      "\ttestify \"github.com/stretchr/testify/assert\"",
      "",
      "\t$1",
      ")",
      "",
      "var (",
      "\terr              error",
      "\tassert           *testify.Assertions",
      "\texpected, actual string",
      ")",
      "",
      "func SetupAssert(t *testing.T) {",
      "\tassert = testify.New(t)",
      "}",
      "",
      "func TestAcceptance${2:_X_}${3|Suite,Features|}(t *testing.T) {",
      "\tSetupAssert(t)",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Test Suite": {
    "prefix": ["go_suite"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/suite\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}Suite struct {",
      "\tsuite.Default",
      "\t${3:$LINE_COMMENT SUT}",
      "}",
      "",
      "func (s *$2Suite) SetupTest() {",
      "\t$4",
      "}",
      "",
      "func (s *$2Suite) Test$2() {",
      "\t$6",
      "}",
      "",
      "func (s *$2Suite) Test$2Err$7() {",
      "\t$8",
      "}",
      "",
      "func (s *$2Suite) TestWith$9() {",
      "\t$10",
      "}",
      "",
      "func (s *$2Suite) TearDownTest() {",
      "\t$5",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Mock": {
    "prefix": ["go_mock"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/mock\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}Mock struct {",
      "\tmock.Default",
      "}",
      "",
      "func (m *$2Mock) ${3:_X_}(${4:_X_} ${5:any}) ${6:(string, error)} {",
      "\t${7:args := m.Called($4)\n\treturn args.Get(0).(string), nil}",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Mother": {
    "prefix": ["go_mother"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/mother\"",
      ")",
      "",
      "type m struct {",
      "\t*mother.Mother",
      "}",
      "",
      "func (m *m) ${1:_X_}Valid() *$1 {",
      "\t${2:return nil}",
      "}",
      "",
      "func (m *m) $1Invalid() (${3:any}, error) {",
      "\t${4:return nil, nil}",
      "}",
      "",
      "var Mother = mother.New[m]",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Assert": {
    "prefix": ["go_assert"],
    "body": ["s.Equal(expected, actual)"],
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                    Error                                   */
  /* -------------------------------------------------------------------------- */

  "Bubble": {
    "prefix": ["go_bubble"],
    "body": [
      "errors.New[errors.$1](&errors.Bubble{",
      "\tWhat: \"$2\",",
      "\tWhy: errors.Meta{",
      "\t\t\"$3\": \"$4\",",
      "\t},",
      "\tWho: err,",
      "})",
    ],
    "scope": "go",
  },

  "Bubble Up": {
    "prefix": ["go_up"],
    "body": ["if err != nil {", "\treturn errors.BubbleUp(err)", "}"],
    "scope": "go",
  },

  "Assertion": {
    "prefix": ["go_assertion"],
    "body": ["$1, ok := $2.($3)", "", "if !ok {", "\treturn errors.$4", "}"],
    "scope": "go",
  },

  "Join": {
    "prefix": ["go_join"],
    "body": [
      "if err := errors.Join($1); err != nil {",
      "\treturn ${2:nil,} errors.BubbleUp(err)",
      "}",
    ],
    "scope": "go",
  },
}
